###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["Idea",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def Idea(self) -> "IdeaAst":
        return IdeaAst(self)





class IdeaAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Idea")
        self._properties: typing.Set[str] = set([ "hypothesis",  "supportingArguments",  "researchOpportunities",  "methodology",  "results",  "conclusions",  "limitations",  "futureDirections",  "keyFindings",  "references", ])
        self._props = IdeaProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "IdeaProperties":
        return self._props


class IdeaViewer(IdeaAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class IdeaProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def hypothesis(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("hypothesis"))

    @property
    def supportingArguments(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("supportingArguments"))

    @property
    def researchOpportunities(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("researchOpportunities"))

    @property
    def methodology(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("methodology"))

    @property
    def results(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("results"))

    @property
    def conclusions(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("conclusions"))

    @property
    def limitations(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("limitations"))

    @property
    def futureDirections(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("futureDirections"))

    @property
    def keyFindings(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("keyFindings"))

    @property
    def references(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("references"))

    




__all__ = ["TypeBuilder"]